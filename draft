from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time
import csv

# Set up Chrome options for headless mode (no browser UI)
options = Options()
options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

# Initialize the WebDriver
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)


def extract_relevant_blocks():
    """Extract relevant content blocks and specific details."""
    # Open the URL
    url = "https://www.gov.il/he/departments/dynamiccollectors/hesdermutne?skip=10"
    driver.get(url)

    # Wait for the page to load completely
    time.sleep(5)

    # Click all "view more" buttons to expand the content
    expand_buttons = driver.find_elements(By.XPATH, "//div[@ng-click='item.isDisplay = !item.isDisplay']")
    for button in expand_buttons:
        button.click()
        time.sleep(1)  # Wait for content to load

    # Find the relevant blocks by the div structure
    blocks = driver.find_elements(By.XPATH, "//div[@class='row row-gov']")
    extracted_data = []

    for block in blocks:
        try:
            case_number = block.find_element(By.XPATH,
                                             ".//label[contains(text(), 'מספר תיק')]/following-sibling::span").text
            branch = block.find_element(By.XPATH, ".//label[contains(text(), 'שלוחה')]/following-sibling::span").text
            date = block.find_element(By.XPATH, ".//label[contains(text(), 'תאריך')]/following-sibling::span").text
            hebrew_date = block.find_element(By.XPATH,
                                             ".//label[contains(text(), 'תאריך עברי')]/following-sibling::span").text
            description = block.find_element(By.XPATH,
                                             ".//h3[contains(text(), 'תיאור העובדות')]/following-sibling::li").text
            legislation = block.find_element(By.XPATH,
                                             ".//h3[contains(text(), 'הוראות החיקוק')]/following-sibling::li").text
            conditions = block.find_element(By.XPATH, ".//h3[contains(text(), 'תנאי הסדר')]/following-sibling::li").text
            reasoning = block.find_element(By.XPATH,
                                           ".//h3[contains(text(), 'נימוקים לסגירת התיק')]/following-sibling::div").text

            extracted_data.append({
                "מספר תיק": case_number,
                "שלוחה": branch,
                "תאריך": date,
                "תאריך עברי": hebrew_date,
                "תיאור העובדות המהוות עבירה שבהן הודה החשוד": description,
                "הוראות החיקוק שפורטו בהסדר": legislation,
                "תנאי הסדר": conditions,
                "נימוקים לסגירת התיק בהסדר": reasoning,
            })
        except Exception as e:
            print(f"Error extracting block: {e}")

    return extracted_data


def save_to_csv(data):
    """Save the extracted data to a CSV file."""
    with open("updated_blocks.csv", "w", encoding="utf-8", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=[
            "מספר תיק", "שלוחה", "תאריך", "תאריך עברי",
            "תיאור העובדות המהוות עבירה שבהן הודה החשוד",
            "הוראות החיקוק שפורטו בהסדר",
            "תנאי הסדר",
            "נימוקים לסגירת התיק בהסדר",
        ])
        writer.writeheader()
        writer.writerows(data)
    print("Updated content blocks have been saved to 'updated_blocks.csv'.")


try:
    # Extract the relevant blocks and details
    extracted_data = extract_relevant_blocks()

    # Save the extracted data to a CSV file
    save_to_csv(extracted_data)

except Exception as e:
    print(f"An error occurred: {e}")

finally:
    driver.quit()
    print("Driver closed.")
